set preview true
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
set nohidden
set icons true
set ignorecase true

# Custom Functions
cmd open ${{
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            [ ! -d "$mntdir" ] && {
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        text/*|application/json) $EDITOR "$f";;
        *.pdf) zathura "$f" & disown;;
        *.mp4|*.mkv|*.avi|*.mov|*.mp3|*.wav) mpv --player-operation-mode=pseudo-gui -- "$f" & disown;;
        *.jpg|*.jpeg|*.png) xdg-open "$f" & disown;;
        *) xdg-open "$f";;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper %cp "$f" ~/.config/wall.png && nitrogen --set-scaled "$f"

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# pasting done right
#cmd paste &{{
#    load=$(lf -remote 'load')
#    mode=$(echo "$load" | sed -n '1p')
#    list=$(echo "$load" | sed '1d')
#    if [ $mode = 'copy' ]; then
#        cp -rn $list .
#    elif [ $mode = 'move' ]; then
#        mv -n $list .
#    fi
#    lf -remote 'send load'
#    lf -remote 'send clear'
#}}
#
#cmd paste &{{
#    load=$(lf -remote 'load')
#    mode=$(echo "$load" | sed -n '1p')
#    list=$(echo "$load" | sed '1d')
#    if [ $mode = 'copy' ]; then
#        rsync -av --ignore-existing --progress "$list" . \
#        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
#        | while read line; do
#            lf -remote "send $id echo $line"
#        done
#    elif [ $mode = 'move' ]; then
#        mv -n $list .
#    fi
#    lf -remote 'send load'
#    lf -remote 'send clear'
#}}

cmd Link %{{
	lf -remote 'load' | while read file; do
		if [ ! -n "${mode+1}" ]; then
			mode="$file"
			continue
		fi
		files+=("$file")
	done
	if [ "${#files[@]}" -le 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 0
	fi
	# symbolicly copy mode is indicating a soft link
	if [[ "$mode" == copy ]]; then
		ln -sr $files -t .
	# while a move mode is indicating a hard link
	elif [[ "$mode" == move ]]; then
		ln $files -t .
	fi
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map e $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
map f broot_jump

# Dragon Mapping
map dr dragon
map dm mvdragon
map dc cpdragon
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
map o open_config
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect
map P :Link

# Movement
map gtr cd ~/.local/share/Trash/files
map gh cd ~

map gv. cd ~/Videos
map gp. cd ~/Pictures
map gd cd ~/Documents
map gD cd ~/Downloads
map ge cd ~/Desktop

map gr. cd ~/git
map gc cd ~/.config
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share
